import{o as n,c as s,a}from"./app.b52713d1.js";const p='{"title":"使用 js 裁剪 png 图片的透明边框","description":"","frontmatter":{"title":"使用 js 裁剪 png 图片的透明边框","date":"2022-05-29","tags":["JavaScript"],"describe":"最近开发中遇到一个图片裁剪的需求，具体就是对 png 格式的图片进行处理，如果图片四周有透明部分，则对图片进行裁剪，仅保留有内容的矩形区域。查阅相关资料后使用 canvas 实现了该功能。"},"headers":[{"level":2,"title":"使用 js 裁剪 png 图片的透明边框","slug":"使用-js-裁剪-png-图片的透明边框"}],"relativePath":"使用 js 裁剪 png 图片的透明边框.md","lastUpdated":1653823536416}',t={},o=[a('<h2 id="使用-js-裁剪-png-图片的透明边框"><a class="header-anchor" href="#使用-js-裁剪-png-图片的透明边框" aria-hidden="true">#</a> 使用 js 裁剪 png 图片的透明边框</h2><blockquote><p>最近开发中遇到一个图片裁剪的需求，具体就是对 png 格式的图片进行处理，如果图片四周有透明部分，则对图片进行裁剪，仅保留有内容的矩形区域。查阅相关资料后使用 canvas 实现了该功能。</p></blockquote><p>首先我们知道图片是由一个个的像素点组成的，要想裁剪周围的透明边框，我们需要找到不透明区域的边界在什么位置，具体来说就是水平和垂直方向上从哪个位置开始出现不透明的像素点，又是到哪个位置以后不再出现不透明的像素点，这样水平方向和垂直方向开始结束的位置所围成的矩形区域就是我们需要裁剪的区域了。而 canvas 刚好能帮助我们实现该判断。</p><p>假设我们有一张宽为 w, 高为 h 的需要裁剪图片，首先需要创建一个 canvas 元素，并获取canvas 上下文，然后使用 canvas 的 getImageData api 获取图片信息。</p><div class="language-js"><pre><code><span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;canvas&#39;</span><span class="token punctuation">)</span>\ncanvas<span class="token punctuation">.</span>width <span class="token operator">=</span> w\ncanvas<span class="token punctuation">.</span>height <span class="token operator">=</span> h\n<span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span>\nctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span>\n<span class="token keyword">const</span> imgData <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span>\n</code></pre></div><p><code>imgData</code> 中有一个 <code>data</code> 属性，它是一个 Uint8ClampedArray, 类数组结构，每四个元素表示一个像素点信息，即像素点的 RGBA 值，所以可以看成一个 <code>[rgbargbargba...]</code> 这样的数组。如下图，每个格子代表一个像素点的话，data 就是一个从第一个 rgba 一直到最后一个 rgba 的数组，其中 a 代表的是当前像素点的 alpha 通道，即透明度。因此可以通过遍历每一个像素点来确认裁剪的边界。</p><p><img src="https://cdn.jsdelivr.net/gh/Zjinxing/image-galary/blog/%E6%88%AA%E5%B1%8F2022-05-29%2017.50.56.png" alt=""></p><p>通过以下方法找出边界：</p><div class="language-js"><pre><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 开始出现像素点的 x 坐标</span>\n    y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 开始出现像素点的 y 坐标</span>\n    maxX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 最后出现像素点的 x 坐标</span>\n    maxY <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 最后出现像素点的 y 坐标</span>\n<span class="token keyword">let</span> freezedY <span class="token operator">=</span> <span class="token boolean">false</span>\n\n\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> h<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 像素行循环</span>\n    <span class="token keyword">let</span> rowOpacity <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 用于判断当前行是否全是透明</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> w<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 循环第 i 行像素点的每一列</span>\n        <span class="token keyword">const</span> alpha <span class="token operator">=</span> imgData<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">*</span> w <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>alpha <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 当前像素点不透明</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                x <span class="token operator">=</span> j\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token comment">// 取最小的 x 坐标</span>\n            <span class="token punctuation">}</span>\n            maxX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxX<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token comment">// 结束取最大的 y 坐标</span>\n            rowOpacity <span class="token operator">=</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 一行循环完毕，更新 y 坐标</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>rowOpacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 一行循环完毕且尚未遇到有不透明像素的行，y++</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>freezedY<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            y<span class="token operator">++</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        freezedY <span class="token operator">=</span> <span class="token boolean">true</span>\n        maxY <span class="token operator">=</span> i\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> width <span class="token operator">=</span> maxX <span class="token operator">-</span> x <span class="token comment">// 裁剪区宽度</span>\n<span class="token keyword">const</span> height <span class="token operator">=</span> maxY <span class="token operator">-</span> y <span class="token comment">// 裁剪区高</span>\n</code></pre></div><p>这样就获取到了裁剪区的坐标及宽高，然后我们新建一个 canvas，就可以把裁剪部分保存下来了：</p><div class="language-js"><pre><code><span class="token keyword">const</span> rectImgData <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token comment">// 裁剪区数据</span>\n<span class="token keyword">const</span> canvas1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;canvas&#39;</span><span class="token punctuation">)</span>\ncanvas1<span class="token punctuation">.</span>width <span class="token operator">=</span> width\ncanvas1<span class="token punctuation">.</span>height <span class="token operator">=</span> height\n<span class="token keyword">const</span> ctx1 <span class="token operator">=</span> canvas1<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span>\nctx1<span class="token punctuation">.</span><span class="token function">putImageData</span><span class="token punctuation">(</span>rectImgData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> base64Img <span class="token operator">=</span> canvas1<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">&#39;image/png&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>这样就获取到了裁剪区域的 base64 数据了，可以根据需要把他保存到本地或者是展示在页面中。</p>',12)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
